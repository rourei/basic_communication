#!/usr/bin/env python

# ROS initialization, import of the parameter generator and creating an object instance
PACKAGE = "basic_communication"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

"""
Next, several parameters will be defined. Arguments: gen.add(name, paramtype, level, description, default, min, max)
name: name under which the parameter will be stored
paramtype: int_t, double_t, str_t, bool_t
level: maps to a bitmask which can be used to determine which parameter haven been changed in a new configuration
min/max: optional, does not apply to strings and bools
"""

gen.add("int_param",    int_t,    1, "An Integer parameter", 50,  0, 100)
gen.add("double_param", double_t, 17, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   5, "A Boolean parameter",  True)

# Definition of an integer parameter whose value is set by an enum.
size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size") # description of enum

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
# Parameter can now be set to "Small" oder "Medium" and is still interpreted as an int


"""
- Generation of necessary files and exit
- second parameter: name of a node this could run in (used to generate documentation only)
- third parameter: prefix for generated files, should be the same as the name of the corresponding config file (i.e. this one)
-> Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them. 
"""
exit(gen.generate(PACKAGE, "basic_communication", "Tutorials"))
